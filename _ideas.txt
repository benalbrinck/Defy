I'm gonna have to completely rethink this...

Doing it as a collection of players instead I think will work...
Then we can go crazy and predict who will be injured and stuff and figure our who will play...


- Opponent stats seem good
    - Might be a replacement for conference stats
- Either pick n players from each team
    - Or, do quick stats on each individual stat (mean, stdev?)
        - Then that'll summarize everything in less data
- Check above, we may wanna go crazy and do that
    - Are there stats on how likely it is for someone to get hurt based on what they do?
    - Could make a quick net that predicts whether a player will get hurt per game
    - Then can predict that whole thing...

- I would start with opponent stats, then move on to player stuff
- Then the scores are not very good, so probably just do results with percentages
    as output
- Probably need to start doing Overlord stuff for ML
    - The idea of (Inhuman?) probably can work correctly now-ish
        - Inhuman was Immortal... there's a diagram on Drive
        - Inhuman sounds better
    - May need some modifications to the network


ONES DOING NOW
- Team stats
- Conference id

NEW ONES
- Opponent stats # I'm pretty sure this is in team stats
- N players stats
- Player stats summary

- Rankings?




How much data do we need?

How much do we need to train?

How are we going to model the data?
- Keep team stats and conference stats
- Add on top 10 players
- Each player has a tick on whether or not they were injured
- In output, have the usual two numbers for winning/losing (softmax just these two)
- Then, have 20 ticks for the probability that each player got injured (tanh these)
- Then we just need to know who was injured in all of the games

Is there actually a way to get this data?

How are we going to model getting injured/recovering?
- 

How are we going to take into account luck/randomness?
